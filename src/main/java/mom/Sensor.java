/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mom;

import static java.lang.Float.parseFloat;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.*;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;

public class Sensor extends javax.swing.JFrame {
    
    private static String url = ActiveMQConnection.DEFAULT_BROKER_URL;
    private Connection connection = null;
    private Session session = null;
    private MessageProducer producer = null;
    
    String tipoSensor;
    String name;
    float atual;
    float maximo;
    float minimo;
    String queueName = "default";
    boolean sensorAtivo = false;
    /** Creates new form NewJFrame */
    public Sensor() {
        initComponents();
        setSize(550, 450);
        try {
            // Inicializa a conexão uma vez
            inicializarConexao();
        } catch (JMSException ex) {
            Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Inicializa a conexão com o ActiveMQ
    private void inicializarConexao() throws JMSException {
        // Estabelecendo a conexão com o ActiveMQ
        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
        connection = connectionFactory.createConnection();
        connection.start();

        // Criando a sessão
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        nome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        valorMax = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        valorMin = new javax.swing.JTextField();
        atualizar = new javax.swing.JButton();
        titulo = new javax.swing.JLabel();
        criar1 = new javax.swing.JButton();
        criar2 = new javax.swing.JButton();
        tipoMedicao = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Nome:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 40, 20));
        getContentPane().add(nome, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 430, -1));

        jLabel2.setText("Tipo:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 30, 20));

        jLabel4.setText("Valor Max:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 80, 20));

        valorMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorMaxActionPerformed(evt);
            }
        });
        getContentPane().add(valorMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 170, -1));

        jLabel5.setText("Valor Min:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 80, 20));

        valorMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorMinActionPerformed(evt);
            }
        });
        getContentPane().add(valorMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 170, -1));

        atualizar.setText("Atualizar");
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });
        getContentPane().add(atualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 480, 50));

        titulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, -1, -1));

        criar1.setText("Criar");
        criar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criar1ActionPerformed(evt);
            }
        });
        getContentPane().add(criar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 480, 50));

        criar2.setText("Desligar");
        criar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desligarActionPerformed(evt);
            }
        });
        getContentPane().add(criar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 480, 50));

        tipoMedicao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Velocidade", "Temperatura", "Pressão", "Umidade", "Altura" }));
        getContentPane().add(tipoMedicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void valorMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorMaxActionPerformed

    private void valorMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorMinActionPerformed

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
       
        maximo = parseFloat(valorMax.getText());
        minimo = parseFloat(valorMin.getText());
        String message;
        if (atual>maximo){
            message = name +" de "+tipoSensor+ " ultrapassou o valor máximo de "+valorMax.getText()+". Valor atual: " +atual;
            try {
                publisher(name, message);
            } catch (JMSException ex) {
                Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(atual<minimo){
            message = name +" de "+tipoSensor+ " está abaixo do valor mínimo de "+valorMin.getText()+". Valor atual: " +atual;
            try {
                publisher(name, message);
            } catch (JMSException ex) {
                Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_atualizarActionPerformed

    private void criar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criar1ActionPerformed
        sensorAtivo = true;
        criar1.setEnabled(!sensorAtivo);
        nome.setEnabled(!sensorAtivo);
        tipoMedicao.setEnabled(!sensorAtivo);
        valorMax.setEnabled(!sensorAtivo);
        valorMin.setEnabled(!sensorAtivo);
        
        name = nome.getText();
        //atual = parseFloat(valorAtual.getText());
        maximo = parseFloat(valorMax.getText());
        minimo = parseFloat(valorMin.getText());
        
        titulo.setText(name);
        
    
        
        try {
            //joga nome do topico na fila
            produtor(name);
           
            iniciarLoopDeEnvio(name);
            
        } catch (JMSException ex) {
            Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_criar1ActionPerformed

    private void iniciarLoopDeEnvio(final String name) {
        // Cria um novo Thread para enviar mensagens em loop
        
        new Thread(() -> {
            while (sensorAtivo) {
                try {
                    System.out.println("Iniciando loop");
                    maximo = parseFloat(valorMax.getText());
                    minimo = parseFloat(valorMin.getText());
                    String message;
                    Random random = new Random();
                    atual = random.nextFloat(maximo*2);
                    System.out.println(atual);
                    if (atual>maximo){
                        message = name +" de "+tipoMedicao.getSelectedItem()+ " ultrapassou o valor máximo de "+valorMax.getText()+". Valor atual: " +atual;
                        try {
                            publisher(name, message);
                        } catch (JMSException ex) {
                            Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else if(atual<minimo){
                        message = name +" de "+tipoMedicao.getSelectedItem()+ " está abaixo do valor mínimo de "+valorMin.getText()+". Valor atual: " + atual;
                        try {
                            publisher(name, message);
                        } catch (JMSException ex) {
                            Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    publisher(name, "");
                    // Simula um intervalo entre as mensagens
                    Thread.sleep(5000); // Envia uma mensagem a cada 5 segundos
                } catch (JMSException | InterruptedException ex) {
                    Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            try {
                publisher(name, "Sensor desligado");
            } catch (JMSException ex) {
                Logger.getLogger(Sensor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
        
    }
    
    private void desligarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desligarActionPerformed
//        try {
            sensorAtivo = !sensorAtivo;
            criar1.setEnabled(!sensorAtivo);
            nome.setEnabled(!sensorAtivo);
            tipoMedicao.setEnabled(!sensorAtivo);
            valorMax.setEnabled(!sensorAtivo);
            valorMin.setEnabled(!sensorAtivo);
//            if (producer != null) producer.close();
//            if (session != null) session.close();
//            if (connection != null) connection.close();
            System.out.println("Conexão fechada.");
//        } catch (JMSException e) {
//            e.printStackTrace();
//        }
    }//GEN-LAST:event_desligarActionPerformed
    
    //private static String url = ActiveMQConnection.DEFAULT_BROKER_URL;
    
    public void publisher(String topicName, String sensorMessage) throws JMSException
            {
		/*
		 * Criando Topic
		 */     
		Destination dest = session.createTopic(topicName);

		/*
		 * Criando Produtor
		 */
		MessageProducer publisher = session.createProducer(dest);
                
                if(!sensorMessage.equals("")){
                    System.out.println("enviando:"+sensorMessage);
                    TextMessage message = session.createTextMessage();
                    message.setText(sensorMessage);
                    publisher.send(message);
                }
	}
    
    public void produtor(String name) throws JMSException
        {
            Destination destination = session.createQueue(queueName);
            MessageProducer producer = session.createProducer(destination);
            TextMessage message = session.createTextMessage(name);
            producer.send(message);
            System.out.println("Mensagem enviada para a fila: " + message.getText());
            producer.close();

        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sensor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atualizar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton criar1;
    private javax.swing.JButton criar2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField nome;
    private javax.swing.JComboBox<String> tipoMedicao;
    private javax.swing.JLabel titulo;
    private javax.swing.JTextField valorMax;
    private javax.swing.JTextField valorMin;
    // End of variables declaration//GEN-END:variables

}
